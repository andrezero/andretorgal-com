---
import { ExternalLink } from '@components/atoms';
import { autoLabel } from '@components/icons';
import Markdown from '@components/page/Markdown.astro';
import type { BaseNode } from '@nodes/index';

export type AbstractVariant = 'full' | 'compact' | 'mini';

export type Props = {
    node: BaseNode;
    variant?: AbstractVariant;
    max?: number | undefined | null;
};

const { node, variant = 'full', max } = Astro.props;
const { description, abstract } = node;

function trim(str: string | undefined, max?: number): string | undefined {
    return str && max && str.length > max ? str.slice(0, max - 1) + '&hellip;' : str;
}

const text = (max ? abstract?.text : abstract?.markdown) || description;
const content = max ? trim(text, max) : text;
const source = abstract?.source;
const sourceLink = source ? { url: source, label: autoLabel(source) } : undefined;
---

{
    content && (
        <div class:list={[variant, { 'has-source': Boolean(sourceLink) }]}>
            <Markdown content={content} />
            {sourceLink && <ExternalLink link={sourceLink} />}
        </div>
    )
}

<style>
    div {
        display: flex;
        flex-direction: column;
        gap: var(--gap-h-s);
        font-size: var(--t-type-size-1);
    }

    .has-source {
        font-style: italic;
    }

    .compact {
        font-size: var(--t-type-size-0);
        line-height: var(--t-type-height-small);
    }

    .mini {
        font-size: var(--t-type-size--2);
        line-height: var(--t-type-height-compact);
    }
</style>
