---
import { type BaseNode, getNodeThumbImage } from '@nodes/index';

import { NodeAbstract, NodeDate, NodeThumb, NodeType, TagLink } from '../parts';

export type CardVariant = 'full' | 'compact';

export type Props = {
    node: BaseNode;
    variant?: CardVariant | undefined;
    type?: boolean | undefined;
};

const SHOW_DATE = ['post'];

const { node, variant = 'full', type } = Astro.props;

const thumbImage = getNodeThumbImage(node);

const showDate = SHOW_DATE.includes(node.type);
const showAbstract = !thumbImage;
const showType = type && node.type !== 'tag';
const classList = [variant, `type-${node.type}`, { 'has-date': showDate, 'has-type': showType }];
---

<article class:list={classList}>
    <a class="mini-layout" href={node.url}>
        {
            showType && (
                <div class="badge">
                    <NodeType node={node} />
                </div>
            )
        }
        <h3>
            {
                node.type === 'tag' ? (
                    <span class="node-tag">
                        <TagLink tag={node.title} nolink>
                            {node.title}
                        </TagLink>
                    </span>
                ) : (
                    <span class="node-title">{node.title}</span>
                )
            }
        </h3>
        <div class="node-details">
            {
                showDate && (
                    <div class="node-date">
                        <NodeDate size="s" node={node} />
                    </div>
                )
            }

            {
                showAbstract && (
                    <span class="node-abstract">
                        <NodeAbstract node={node} variant="compact" max={75} />
                    </span>
                )
            }
        </div>
    </a>
    {
        thumbImage && (
            <span aria-hidden class="node-thumb">
                <NodeThumb node={node} />
            </span>
        )
    }
</article>

<style>
    article {
        position: relative;
        gap: var(--gap-h-s);
        height: var(--t-space-2xl-3xl);
        overflow: hidden;
        background-color: var(--scheme-container-bg);
    }

    .mini-layout {
        position: relative;
        z-index: 1;
        display: flex;
        flex-direction: column;
        justify-content: space-between;
        gap: var(--proportional-half);
        height: 100%;
        padding: var(--proportional-quarter);
        text-decoration: none;
        border-radius: 0;
        background: linear-gradient(
            to top,
            rgba(255, 255, 255, 0.05),
            rgba(255, 255, 255, 0.3) 50%,
            rgba(255, 255, 255, 0.7) 65%,
            rgba(255, 255, 255, 0.95) 80%
        );
    }

    .has-date .mini-layout {
        padding-top: var(--proportional-quarter);
    }

    .mini-layout:hover {
        background: linear-gradient(
            to top,
            rgba(255, 255, 255, 0),
            rgba(255, 255, 255, 0.1) 50%,
            rgba(255, 255, 255, 0.8) 70%,
            rgba(255, 255, 255, 1) 75%
        );
    }

    @media (prefers-color-scheme: dark) {
        .mini-layout {
            background: linear-gradient(
                to top,
                rgba(0, 0, 0, 0.2),
                rgba(0, 0, 0, 0.3) 50%,
                rgba(0, 0, 0, 0.8) 70%,
                rgba(0, 0, 0, 1) 100%
            );
        }

        .mini-layout:hover {
            background: linear-gradient(
                to top,
                rgba(0, 0, 0, 0),
                rgba(0, 0, 0, 0.2) 50%,
                rgba(0, 0, 0, 0.9) 70%,
                rgba(0, 0, 0, 1) 100%
            );
        }
    }

    .node-details {
        display: flex;
        flex-direction: column-reverse;
        gap: var(--proportional-one);
    }

    .badge {
        position: absolute;
        display: flex;
        top: var(--proportional-quarter);
        right: var(--proportional-quarter);
    }

    h3 {
        display: flex;
        font-size: var(--t-type-size-0);
    }

    .has-type h3 {
        padding-right: 3.5rem;
    }

    .node-title {
        text-decoration: underline;
    }

    .node-abstract {
        color: var(--scheme-fg);
        text-decoration: none;
    }

    .node-thumb {
        position: absolute;
        inset: 0;
        z-index: 0;
        border-radius: 3px;
    }

    .node-tag,
    .node-tag > :global(*),
    .node-date > :global(*) {
        display: block;
    }

    :hover .node-tag > :global(*) {
        color: var(--scheme-bg);
        background-color: var(--scheme-a-on);
    }

    :active .node-tag > :global(*) {
        color: var(--scheme-fg);
        background-color: var(--scheme-bg);
    }

    .node-title {
        display: -webkit-box;
        -webkit-box-orient: vertical;
        overflow: hidden;
        text-overflow: ellipsis;
        -webkit-line-clamp: 2;
    }

    p {
        font-size: var(--t-type-size-0);
    }
</style>
