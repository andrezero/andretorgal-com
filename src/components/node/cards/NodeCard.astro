---
import type { BaseNode } from '@queries/types';
import type { ImageMetadata } from 'astro';
import { dirname } from 'node:path';

import NodeAbstract from '../parts/NodeAbstract.astro';
import NodeDate from '../parts/NodeDate.astro';
import NodeTags from '../parts/NodeTags.astro';
import NodeThumb from '../parts/NodeThumb.astro';
import TagLink from '../parts/TagLink.astro';

export type CardVariant = 'default' | 'compact' | undefined;

export type Props = {
    node: BaseNode;
    variant?: CardVariant;
};

const SHOW_DATE = ['post'];
const SHOW_TAGS = ['post', 'meta', 'page'];

const { node, variant = 'default' } = Astro.props;

const showDate = SHOW_DATE.includes(node.type);
const showTags = SHOW_TAGS.includes(node.type);

const image = node.images.internal.length
    ? dirname(node.mdxFilename) + '/' + node.images.internal[0]?.src.replace('./', '')
    : '';
const images = import.meta.glob<{ default: ImageMetadata }>('/src/pages/**/*.{jpeg,jpg,png,gif}');

const thumbImage = Object.entries(images).find(([key]) => {
    return image.endsWith(key);
});

console.log(thumbImage, image);
const maxChars = thumbImage && variant === 'compact' ? 100 : undefined;
---

<article class:list={[variant]}>
    <header>
        <h3>
            {
                node.type === 'tag' ? (
                    <TagLink tag={node.title} size="large">
                        {node.title}
                    </TagLink>
                ) : (
                    <a href={node.url}>{node.title}</a>
                )
            }
        </h3>
        {showDate && <NodeDate size="s" node={node} />}
    </header>
    {
        thumbImage && (
            <a href={node.url}>
                <NodeThumb node={node} />
            </a>
        )
    }
    <NodeAbstract node={node} compact max={maxChars} />
    {showTags && <NodeTags node={node} />}
</article>

<style>
    article {
        display: flex;
        flex-direction: column;
        gap: var(--t-space-xs);
    }

    header {
        display: flex;
        flex-direction: column-reverse;
        gap: var(--t-space-2xs);
    }

    div {
        display: flex;
        gap: var(--layout-gap);
        flex-direction: column;
    }

    @media screen and (min-width: 650px) {
        div {
            display: grid;
            gap: var(--layout-wall);
            grid-template-columns: 50% auto;
        }
    }

    p {
        font-size: var(--t-type-size-0);
    }
</style>
