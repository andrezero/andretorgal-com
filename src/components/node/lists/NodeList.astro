---
import type { BaseNode } from '@nodes/index';

import { NodeCard, NodeMini, type CardVariant } from '../cards';
import { NodeLink } from '../parts';

export type Props = {
    nodes: BaseNode[];
    variant?: 'mini' | 'textual' | CardVariant;
    type?: boolean | undefined;
};

const { nodes, variant = 'full', type } = Astro.props;

const isCard = variant === 'compact' || variant === 'full';
const isLink = variant === 'textual';
const isMini = variant === 'mini';
---

<ul class:list={[variant]}>
    {
        nodes.map(node => (
            <li>
                {isCard && <NodeCard node={node} variant={variant} />}
                {isMini && <NodeMini node={node} type={type} />}
                {isLink && <NodeLink node={node} size="compact" type={type} />}
            </li>
        ))
    }
</ul>

<style>
    ul,
    li {
        display: flex;
        flex-direction: column;
        width: 100%;
        overflow: hidden;
    }

    ul {
        gap: var(--layout-space);
    }

    .compact {
        display: grid;
        width: 100%;
        column-gap: var(--layout-wall);
        row-gap: var(--layout-space);
    }

    .mini {
        display: grid;
        width: 100%;
        column-gap: var(--layout-wall);
        row-gap: var(--layout-space);
    }

    .textual {
        display: grid;
        width: 100%;
        column-gap: var(--layout-wall);
        row-gap: var(--layout-gap);
    }

    @container container (min-width: 540px) {
        .mini {
            grid-template-columns: repeat(2, 47%);
        }
    }

    @container container (min-width: 840px) {
        .mini {
            grid-template-columns: repeat(3, 31%);
        }
    }

    @container container (min-width: 1280px) {
        .mini {
            grid-template-columns: repeat(4, 23%);
        }
    }

    @container container (min-width: 1720px) {
        .mini {
            grid-template-columns: repeat(5, 18%);
        }
    }

    @container container (min-width: 2160px) {
        .mini {
            grid-template-columns: repeat(6, 15%);
        }
    }

    @container container (min-width: 2600px) {
        .mini {
            grid-template-columns: repeat(7, 13%);
        }
    }

    @container container (min-width: 3040px) {
        .mini {
            grid-template-columns: repeat(8, 11%);
        }
    }

    @container container (min-width: 3480px) {
        .mini {
            grid-template-columns: repeat(9, 10%);
        }
    }

    @container container (min-width: 3720px) {
        .mini {
            grid-template-columns: repeat(10, 9%);
        }
    }

    li {
        gap: var(--t-space-2xs);
    }

    p {
        font-size: var(--t-type-size-1);
    }
</style>
