---
import type { BaseNode } from '@nodes/index';
import NodeDate from './NodeDate.astro';
import NodeType from './NodeType.astro';
import TagLink from './TagLink.astro';

export type NodeLinkSize = 'large' | 'medium' | 'normal' | 'compact' | 'tiny' | undefined;

export type Props = {
    node: BaseNode;
    size?: NodeLinkSize;
    type?: boolean | undefined;
};

const SHOW_DATE = ['post'];

const { node, size = 'normal', type: showType } = Astro.props;

const showDate = SHOW_DATE.includes(node.type);
---

<a class:list={['node-link', size]} href={node.url}>
    {
        showType && (
            <div class="badge">
                <NodeType node={node} />
            </div>
        )
    }
    {
        showDate && (
            <div class="node-date">
                <NodeDate size="s" node={node} />
            </div>
        )
    }
    {}
    {
        node.type === 'tag' ? (
            <span class="node-tag">
                <TagLink tag={node.title} size={size} nolink>
                    {node.title}
                </TagLink>
            </span>
        ) : (
            <span class="node-title">{node.title}</span>
        )
    }
</a>

<style>
    .node-link {
        display: inline-flex;
        align-items: center;
        gap: var(--t-space-2xs);
        padding: 0;
        font-family: var(--t-type-family-alt);
        font-weight: var(--t-type-weight-alt-bold);
        text-decoration: none;
        transition: color 0.1s, background-color 0.2s;
    }

    .large {
        font-size: var(--t-type-size-2);
    }

    .medium {
        font-size: var(--t-type-size-1);
    }

    .normal {
        font-size: var(--t-type-size-0);
    }

    .compact {
        font-size: var(--t-type-size--1);
    }

    .tiny {
        font-size: var(--t-type-size--2);
    }

    .node-type {
        width: 6rem;
        display: flex;
        justify-content: flex-end;
    }

    .node-type,
    .node-date {
        flex-shrink: 0;
    }

    .node-tag > :global(*),
    .node-date > :global(*) {
        display: block;
    }

    :hover .node-tag > :global(*) {
        color: var(--scheme-bg);
        background-color: var(--scheme-a-on);
    }

    :active .node-tag > :global(*) {
        color: var(--scheme-fg);
        background-color: var(--scheme-bg);
    }

    .node-title {
        display: block;
        font-size: var(--t-type-size-1);
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
    }
</style>
